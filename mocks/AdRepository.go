// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	ads "ads-server/internal/ads"

	context "context"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// AdRepository is an autogenerated mock type for the AdRepository type
type AdRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *AdRepository) Create(_a0 context.Context, _a1 *ads.Ad) (int64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ads.Ad) (int64, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ads.Ad) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ads.Ad) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1, _a2
func (_m *AdRepository) Delete(_a0 context.Context, _a1 int64, _a2 int64) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Filter provides a mock function with given fields: ctx, params
func (_m *AdRepository) Filter(ctx context.Context, params url.Values) ([]*ads.Ad, error) {
	ret := _m.Called(ctx, params)

	var r0 []*ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, url.Values) ([]*ads.Ad, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, url.Values) []*ads.Ad); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, url.Values) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *AdRepository) GetByID(_a0 context.Context, _a1 int64) (*ads.Ad, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*ads.Ad, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *ads.Ad); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: _a0, _a1
func (_m *AdRepository) GetByName(_a0 context.Context, _a1 string) []*ads.Ad {
	ret := _m.Called(_a0, _a1)

	var r0 []*ads.Ad
	if rf, ok := ret.Get(0).(func(context.Context, string) []*ads.Ad); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ads.Ad)
		}
	}

	return r0
}

// Publish provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *AdRepository) Publish(_a0 context.Context, _a1 int64, _a2 int64, _a3 bool) (*ads.Ad, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, bool) (*ads.Ad, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, bool) *ads.Ad); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, bool) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *AdRepository) Update(_a0 context.Context, _a1 int64, _a2 int64, _a3 string, _a4 string) (*ads.Ad, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, string) (*ads.Ad, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, string) *ads.Ad); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAdRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdRepository creates a new instance of AdRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdRepository(t mockConstructorTestingTNewAdRepository) *AdRepository {
	mock := &AdRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
